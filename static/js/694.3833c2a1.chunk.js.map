{"version":3,"file":"static/js/694.3833c2a1.chunk.js","mappings":"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","sources":["redux/phonebook/phonebook-selectors.js","views/ContactsView/ContactsView.styled.jsx","components/ContactForm/ContactForm.styled.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","views/ContactsView/ContactsView.jsx"],"sourcesContent":["export const getContacts = (state) => state.contacts.items;\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getVisibleContacts = (state) => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  margin: 20px auto;\n  padding: 20px;\n  max-width: 380px;\n  background-color: #c5637c;\n  border-radius: 6px;\n  box-shadow: 7px 7px 13px 0px rgba(0, 0, 0, 0.38);\n`;\nexport const Title = styled.h1`\n  color: black;\n`;\nexport const TitleContacts = styled.h2`\n  color: black;\n`;\nexport const Text = styled.p`\n  padding-top: 15px;\n  color: black;\n`;\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  margin-top: 10px;\n  margin-bottom: 30px;\n`;\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 20px;\n  color: black;\n  font-weight: 500;\n  font-size: 15px;\n`;\nexport const Input = styled.input`\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 15px;\n`;\nexport const Button = styled.button`\n  padding: 5px;\n  margin: 7px 0;\n  border: none;\n  outline: none;\n  border-radius: 6px;\n  background-color: pink;\n  color: black;\n  cursor: pointer;\n  text-transform: capitalize;\n  box-shadow: 7px 7px 13px 0px rgba(0, 0, 0, 0.38);\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:hover {\n    background-color: #c5637c;\n    color: white;\n  }\n`;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\nimport { addContact } from \"../../redux/phonebook/phonebook-operations\";\nimport { Form, Label, Button, Input } from \"./ContactForm.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { nanoid } from \"nanoid\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    resetInput();\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      toast.error(`${name} is already in contacts.`);\n    } else if (contacts.find((contact) => contact.number === number)) {\n      toast.error(`${number} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n  };\n\n  const resetInput = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameInputId}>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label htmlFor={numberInputId}>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          value={number}\n          onChange={(e) => setNumber(e.target.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"sumbit\">Add contact</Button>\n    </Form>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nexport const List = styled.ul`\n  font-size: 18px;\n`;\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: black;\n`;\nexport const Text = styled.p`\n  margin-right: 5px;\n`;\nexport const Button = styled.button`\n  margin-top: 15px;\n  background-color: pink;\n  border: 1px solid #bdbdbd;\n  border-radius: 3px;\n`;\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\nimport { deleteContact } from \"../../redux/phonebook/phonebook-operations\";\nimport { List, Text, Button, Item } from \"./ContactList.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  const onDelete = (id) => dispatch(deleteContact(id));\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <Item key={id}>\n          <Text>\n            {name}: {number}\n          </Text>\n          <Button type=\"button\" onClick={() => onDelete(id)}>\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n}\n","import styled from \"@emotion/styled\";\n\nexport const Wrapper = styled.div`\n  margin-left: 20px;\n`;\nexport const Input = styled.input`\n  border: 1px solid #bdbdbd;\n`;\n","import { changeFilter } from \"../../redux/phonebook/phonebook-operations\";\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\nimport { Wrapper, Input } from \"./Filter.styled\";\nimport { nanoid } from \"nanoid\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onChange = (value) => dispatch(changeFilter(value));\n\n  const handleFilterChange = (e) => {\n    const { value } = e.target;\n    onChange(value);\n  };\n\n  const filterInputId = nanoid();\n\n  return (\n    <Wrapper>\n      <label htmlFor={filterInputId}>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={filter}\n          id={filterInputId}\n          onChange={handleFilterChange}\n          placeholder=\"Find contacts by name\"\n        />\n      </label>\n    </Wrapper>\n  );\n}\n","import { getVisibleContacts } from \"../../redux/phonebook/phonebook-selectors\";\nimport { fetchContacts } from \"../../redux/phonebook/phonebook-operations\";\nimport {\n  Wrapper,\n  Title,\n  TitleContacts,\n  Text,\n} from \"../../views/ContactsView/ContactsView.styled\";\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Toaster } from \"react-hot-toast\";\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport ContactList from \"../../components/ContactList/ContactList\";\nimport Filter from \"../../components/Filter/Filter\";\n\nexport default function ContactView() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\n\n  return (\n    <Wrapper>\n      <Toaster />\n\n      <Title>Phonebook</Title>\n      <ContactForm />\n      <TitleContacts>Contacts</TitleContacts>\n\n      <Filter />\n      {contacts.length > 0 ? (\n        <ContactList contacts={contacts} />\n      ) : (\n        <Text>Your phonebook is empty.</Text>\n      )}\n    </Wrapper>\n  );\n}\n"],"names":["getFilter","state","contacts","filter","getVisibleContacts","items","getContacts","normalizedFilter","toLowerCase","name","includes","Wrapper","styled","Title","TitleContacts","Text","Form","Label","Input","Button","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","resetInput","nameInputId","numberInputId","onSubmit","e","preventDefault","find","contact","toast","addContact","htmlFor","type","value","onChange","target","pattern","title","required","List","Item","ContactList","map","onClick","deleteContact","onDelete","Filter","filterInputId","changeFilter","placeholder","ContactView","useEffect","fetchContacts","length"],"sourceRoot":""}